services:

  backend:
    build:
      target: production
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    container_name: backend-projetao
    depends_on:
      postgres:
        condition: service_healthy

  postgres:
    image: postgres:13.11-bullseye
    container_name: postgres
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    environment:
      POSTGRES_DB: app_db
      POSTGRES_PASSWORD: secret
      POSTGRES_USER: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./var/logs/postgresql:/var/log/postgresql

  redis:
    image: redis:7.0.12-alpine
    container_name: java-spring-boot-boilerplate-redis
    restart: always
    command: redis-server --save 20 1 --loglevel warning --requirepass "secret"
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    networks:
      - db

  redis-commander:
    image: rediscommander/redis-commander:redis-commander-210
    restart: always
    container_name: redis-commander
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_USERNAME: default
      REDIS_PASSWORD: secret
      HTTP_USER: admin
      HTTP_PASSWORD: secret
    ports:
      - "6380:8081"
    networks:
      - db

  mailhog:
    image: mailhog/mailhog:latest
    container_name: mailhog
    restart: always
    ports:
      - "8025:8025"
      - "1025:1025"

volumes:
  postgres-data:
  redis-data:

networks:
  db:
